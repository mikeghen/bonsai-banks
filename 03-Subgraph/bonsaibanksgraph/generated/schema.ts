// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Bonsai extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bonsai entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bonsai entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bonsai", id.toString(), this);
  }

  static load(id: string): Bonsai | null {
    return store.get("Bonsai", id) as Bonsai | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastWatered(): BigInt | null {
    let value = this.get("lastWatered");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastWatered(value: BigInt | null) {
    if (value === null) {
      this.unset("lastWatered");
    } else {
      this.set("lastWatered", Value.fromBigInt(value as BigInt));
    }
  }

  get consecutiveWaterings(): BigInt | null {
    let value = this.get("consecutiveWaterings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveWaterings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveWaterings");
    } else {
      this.set("consecutiveWaterings", Value.fromBigInt(value as BigInt));
    }
  }

  get waterBalance(): BigInt | null {
    let value = this.get("waterBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set waterBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("waterBalance");
    } else {
      this.set("waterBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get lastFertilized(): BigInt | null {
    let value = this.get("lastFertilized");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastFertilized(value: BigInt | null) {
    if (value === null) {
      this.unset("lastFertilized");
    } else {
      this.set("lastFertilized", Value.fromBigInt(value as BigInt));
    }
  }

  get consecutiveFertilizings(): BigInt | null {
    let value = this.get("consecutiveFertilizings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveFertilizings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveFertilizings");
    } else {
      this.set("consecutiveFertilizings", Value.fromBigInt(value as BigInt));
    }
  }

  get fertilizerBalance(): BigInt | null {
    let value = this.get("fertilizerBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fertilizerBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("fertilizerBalance");
    } else {
      this.set("fertilizerBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get lifeStage(): BigInt | null {
    let value = this.get("lifeStage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lifeStage(value: BigInt | null) {
    if (value === null) {
      this.unset("lifeStage");
    } else {
      this.set("lifeStage", Value.fromBigInt(value as BigInt));
    }
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (value === null) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(value as string));
    }
  }

  get botanist(): Bytes | null {
    let value = this.get("botanist");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set botanist(value: Bytes | null) {
    if (value === null) {
      this.unset("botanist");
    } else {
      this.set("botanist", Value.fromBytes(value as Bytes));
    }
  }

  get careTaker(): Bytes | null {
    let value = this.get("careTaker");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set careTaker(value: Bytes | null) {
    if (value === null) {
      this.unset("careTaker");
    } else {
      this.set("careTaker", Value.fromBytes(value as Bytes));
    }
  }

  get grow(): Array<string> {
    let value = this.get("grow");
    return value.toStringArray();
  }

  set grow(value: Array<string>) {
    this.set("grow", Value.fromStringArray(value));
  }

  get water(): Array<string> {
    let value = this.get("water");
    return value.toStringArray();
  }

  set water(value: Array<string>) {
    this.set("water", Value.fromStringArray(value));
  }

  get fertilize(): Array<string> {
    let value = this.get("fertilize");
    return value.toStringArray();
  }

  set fertilize(value: Array<string>) {
    this.set("fertilize", Value.fromStringArray(value));
  }

  get wilt(): Array<string> {
    let value = this.get("wilt");
    return value.toStringArray();
  }

  set wilt(value: Array<string>) {
    this.set("wilt", Value.fromStringArray(value));
  }

  get destroy(): Array<string> {
    let value = this.get("destroy");
    return value.toStringArray();
  }

  set destroy(value: Array<string>) {
    this.set("destroy", Value.fromStringArray(value));
  }
}

export class Growth extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Growth entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Growth entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Growth", id.toString(), this);
  }

  static load(id: string): Growth | null {
    return store.get("Growth", id) as Growth | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (value === null) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(value as string));
    }
  }

  get lifeStage(): BigInt | null {
    let value = this.get("lifeStage");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lifeStage(value: BigInt | null) {
    if (value === null) {
      this.unset("lifeStage");
    } else {
      this.set("lifeStage", Value.fromBigInt(value as BigInt));
    }
  }

  get consecutiveWaterings(): BigInt | null {
    let value = this.get("consecutiveWaterings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveWaterings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveWaterings");
    } else {
      this.set("consecutiveWaterings", Value.fromBigInt(value as BigInt));
    }
  }

  get bonsai(): string | null {
    let value = this.get("bonsai");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bonsai(value: string | null) {
    if (value === null) {
      this.unset("bonsai");
    } else {
      this.set("bonsai", Value.fromString(value as string));
    }
  }
}

export class Water extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Water entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Water entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Water", id.toString(), this);
  }

  static load(id: string): Water | null {
    return store.get("Water", id) as Water | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get lastWatered(): BigInt | null {
    let value = this.get("lastWatered");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastWatered(value: BigInt | null) {
    if (value === null) {
      this.unset("lastWatered");
    } else {
      this.set("lastWatered", Value.fromBigInt(value as BigInt));
    }
  }

  get consecutiveWaterings(): BigInt | null {
    let value = this.get("consecutiveWaterings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveWaterings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveWaterings");
    } else {
      this.set("consecutiveWaterings", Value.fromBigInt(value as BigInt));
    }
  }

  get waterBalance(): BigInt | null {
    let value = this.get("waterBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set waterBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("waterBalance");
    } else {
      this.set("waterBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get bonsai(): string | null {
    let value = this.get("bonsai");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bonsai(value: string | null) {
    if (value === null) {
      this.unset("bonsai");
    } else {
      this.set("bonsai", Value.fromString(value as string));
    }
  }
}

export class Fertilize extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Fertilize entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Fertilize entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Fertilize", id.toString(), this);
  }

  static load(id: string): Fertilize | null {
    return store.get("Fertilize", id) as Fertilize | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get consecutiveWaterings(): BigInt | null {
    let value = this.get("consecutiveWaterings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveWaterings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveWaterings");
    } else {
      this.set("consecutiveWaterings", Value.fromBigInt(value as BigInt));
    }
  }

  get lastFertilized(): BigInt | null {
    let value = this.get("lastFertilized");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastFertilized(value: BigInt | null) {
    if (value === null) {
      this.unset("lastFertilized");
    } else {
      this.set("lastFertilized", Value.fromBigInt(value as BigInt));
    }
  }

  get fertilizerBalance(): BigInt | null {
    let value = this.get("fertilizerBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fertilizerBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("fertilizerBalance");
    } else {
      this.set("fertilizerBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get bonsai(): string | null {
    let value = this.get("bonsai");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bonsai(value: string | null) {
    if (value === null) {
      this.unset("bonsai");
    } else {
      this.set("bonsai", Value.fromString(value as string));
    }
  }
}

export class Wilt extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wilt entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wilt entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wilt", id.toString(), this);
  }

  static load(id: string): Wilt | null {
    return store.get("Wilt", id) as Wilt | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get uri(): string | null {
    let value = this.get("uri");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set uri(value: string | null) {
    if (value === null) {
      this.unset("uri");
    } else {
      this.set("uri", Value.fromString(value as string));
    }
  }

  get consecutiveFertilizings(): BigInt | null {
    let value = this.get("consecutiveFertilizings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveFertilizings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveFertilizings");
    } else {
      this.set("consecutiveFertilizings", Value.fromBigInt(value as BigInt));
    }
  }

  get consecutiveWaterings(): BigInt | null {
    let value = this.get("consecutiveWaterings");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set consecutiveWaterings(value: BigInt | null) {
    if (value === null) {
      this.unset("consecutiveWaterings");
    } else {
      this.set("consecutiveWaterings", Value.fromBigInt(value as BigInt));
    }
  }

  get bonsai(): string | null {
    let value = this.get("bonsai");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bonsai(value: string | null) {
    if (value === null) {
      this.unset("bonsai");
    } else {
      this.set("bonsai", Value.fromString(value as string));
    }
  }
}

export class Destroy extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Destroy entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Destroy entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Destroy", id.toString(), this);
  }

  static load(id: string): Destroy | null {
    return store.get("Destroy", id) as Destroy | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get waterBalance(): BigInt | null {
    let value = this.get("waterBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set waterBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("waterBalance");
    } else {
      this.set("waterBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get fertilizerBalance(): BigInt | null {
    let value = this.get("fertilizerBalance");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fertilizerBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("fertilizerBalance");
    } else {
      this.set("fertilizerBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get bonsai(): string | null {
    let value = this.get("bonsai");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bonsai(value: string | null) {
    if (value === null) {
      this.unset("bonsai");
    } else {
      this.set("bonsai", Value.fromString(value as string));
    }
  }
}
