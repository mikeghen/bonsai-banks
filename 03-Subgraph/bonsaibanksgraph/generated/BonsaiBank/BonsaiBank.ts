// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BonsaiCreated extends ethereum.Event {
  get params(): BonsaiCreated__Params {
    return new BonsaiCreated__Params(this);
  }
}

export class BonsaiCreated__Params {
  _event: BonsaiCreated;

  constructor(event: BonsaiCreated) {
    this._event = event;
  }

  get caretaker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bonsaiId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get bonsaiURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get botanist(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class BonsaiDestroy extends ethereum.Event {
  get params(): BonsaiDestroy__Params {
    return new BonsaiDestroy__Params(this);
  }
}

export class BonsaiDestroy__Params {
  _event: BonsaiDestroy;

  constructor(event: BonsaiDestroy) {
    this._event = event;
  }

  get botanist(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bonsaiID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get waterBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get fertilizerBalance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BonsaiFertilized extends ethereum.Event {
  get params(): BonsaiFertilized__Params {
    return new BonsaiFertilized__Params(this);
  }
}

export class BonsaiFertilized__Params {
  _event: BonsaiFertilized;

  constructor(event: BonsaiFertilized) {
    this._event = event;
  }

  get waterer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bonsaiId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastFertilized(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get consecutiveFertilizings(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fertilizerBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BonsaiGrow extends ethereum.Event {
  get params(): BonsaiGrow__Params {
    return new BonsaiGrow__Params(this);
  }
}

export class BonsaiGrow__Params {
  _event: BonsaiGrow;

  constructor(event: BonsaiGrow) {
    this._event = event;
  }

  get botanist(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bonsaiID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bonsaiURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get lifeStage(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get consecutiveWaterings(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BonsaiWatered extends ethereum.Event {
  get params(): BonsaiWatered__Params {
    return new BonsaiWatered__Params(this);
  }
}

export class BonsaiWatered__Params {
  _event: BonsaiWatered;

  constructor(event: BonsaiWatered) {
    this._event = event;
  }

  get waterer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bonsaiId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastWatered(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get consecutiveWaterings(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get waterBalance(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class BonsaiWilt extends ethereum.Event {
  get params(): BonsaiWilt__Params {
    return new BonsaiWilt__Params(this);
  }
}

export class BonsaiWilt__Params {
  _event: BonsaiWilt;

  constructor(event: BonsaiWilt) {
    this._event = event;
  }

  get botanist(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _bonsaiID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get _bonsaiURI(): string {
    return this._event.parameters[2].value.toString();
  }

  get consecutiveFertilizings(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get consecutiveWaterings(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class BonsaiBank extends ethereum.SmartContract {
  static bind(address: Address): BonsaiBank {
    return new BonsaiBank("BonsaiBank", address);
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getBotanist(): Address {
    let result = super.call("getBotanist", "getBotanist():(address)", []);

    return result[0].toAddress();
  }

  try_getBotanist(): ethereum.CallResult<Address> {
    let result = super.tryCall("getBotanist", "getBotanist():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWaterToken(): Address {
    let result = super.call("getWaterToken", "getWaterToken():(address)", []);

    return result[0].toAddress();
  }

  try_getWaterToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getWaterToken",
      "getWaterToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getFertToken(): Address {
    let result = super.call("getFertToken", "getFertToken():(address)", []);

    return result[0].toAddress();
  }

  try_getFertToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("getFertToken", "getFertToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getWaterAmount(): BigInt {
    let result = super.call("getWaterAmount", "getWaterAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getWaterAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWaterAmount",
      "getWaterAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFertAmount(): BigInt {
    let result = super.call("getFertAmount", "getFertAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFertAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getFertAmount",
      "getFertAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getWaterRate(): BigInt {
    let result = super.call("getWaterRate", "getWaterRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getWaterRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getWaterRate", "getWaterRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getFertRate(): BigInt {
    let result = super.call("getFertRate", "getFertRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getFertRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getFertRate", "getFertRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastWatered(bonsaiId: BigInt): BigInt {
    let result = super.call("lastWatered", "lastWatered(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bonsaiId)
    ]);

    return result[0].toBigInt();
  }

  try_lastWatered(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastWatered",
      "lastWatered(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  consecutiveWaterings(bonsaiId: BigInt): BigInt {
    let result = super.call(
      "consecutiveWaterings",
      "consecutiveWaterings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );

    return result[0].toBigInt();
  }

  try_consecutiveWaterings(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consecutiveWaterings",
      "consecutiveWaterings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  waterBalance(bonsaiId: BigInt): BigInt {
    let result = super.call("waterBalance", "waterBalance(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bonsaiId)
    ]);

    return result[0].toBigInt();
  }

  try_waterBalance(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "waterBalance",
      "waterBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lastFertilized(bonsaiId: BigInt): BigInt {
    let result = super.call(
      "lastFertilized",
      "lastFertilized(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );

    return result[0].toBigInt();
  }

  try_lastFertilized(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastFertilized",
      "lastFertilized(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  consecutiveFertilizings(bonsaiId: BigInt): BigInt {
    let result = super.call(
      "consecutiveFertilizings",
      "consecutiveFertilizings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );

    return result[0].toBigInt();
  }

  try_consecutiveFertilizings(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "consecutiveFertilizings",
      "consecutiveFertilizings(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fertilizerBalance(bonsaiId: BigInt): BigInt {
    let result = super.call(
      "fertilizerBalance",
      "fertilizerBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );

    return result[0].toBigInt();
  }

  try_fertilizerBalance(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fertilizerBalance",
      "fertilizerBalance(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(bonsaiId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lifeStage(bonsaiId: BigInt): BigInt {
    let result = super.call("lifeStage", "lifeStage(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bonsaiId)
    ]);

    return result[0].toBigInt();
  }

  try_lifeStage(bonsaiId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("lifeStage", "lifeStage(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(bonsaiId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  exists(bonsaiId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(bonsaiId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(bonsaiId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(bonsaiId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mint(caretaker: Address, bonsaiURI: string): BigInt {
    let result = super.call("mint", "mint(address,string):(uint256)", [
      ethereum.Value.fromAddress(caretaker),
      ethereum.Value.fromString(bonsaiURI)
    ]);

    return result[0].toBigInt();
  }

  try_mint(caretaker: Address, bonsaiURI: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mint", "mint(address,string):(uint256)", [
      ethereum.Value.fromAddress(caretaker),
      ethereum.Value.fromString(bonsaiURI)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _botanist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SetBotanistCall extends ethereum.Call {
  get inputs(): SetBotanistCall__Inputs {
    return new SetBotanistCall__Inputs(this);
  }

  get outputs(): SetBotanistCall__Outputs {
    return new SetBotanistCall__Outputs(this);
  }
}

export class SetBotanistCall__Inputs {
  _call: SetBotanistCall;

  constructor(call: SetBotanistCall) {
    this._call = call;
  }

  get _botanist(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetBotanistCall__Outputs {
  _call: SetBotanistCall;

  constructor(call: SetBotanistCall) {
    this._call = call;
  }
}

export class SetWaterTokenCall extends ethereum.Call {
  get inputs(): SetWaterTokenCall__Inputs {
    return new SetWaterTokenCall__Inputs(this);
  }

  get outputs(): SetWaterTokenCall__Outputs {
    return new SetWaterTokenCall__Outputs(this);
  }
}

export class SetWaterTokenCall__Inputs {
  _call: SetWaterTokenCall;

  constructor(call: SetWaterTokenCall) {
    this._call = call;
  }

  get _waterToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWaterTokenCall__Outputs {
  _call: SetWaterTokenCall;

  constructor(call: SetWaterTokenCall) {
    this._call = call;
  }
}

export class SetFertTokenCall extends ethereum.Call {
  get inputs(): SetFertTokenCall__Inputs {
    return new SetFertTokenCall__Inputs(this);
  }

  get outputs(): SetFertTokenCall__Outputs {
    return new SetFertTokenCall__Outputs(this);
  }
}

export class SetFertTokenCall__Inputs {
  _call: SetFertTokenCall;

  constructor(call: SetFertTokenCall) {
    this._call = call;
  }

  get _fertToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFertTokenCall__Outputs {
  _call: SetFertTokenCall;

  constructor(call: SetFertTokenCall) {
    this._call = call;
  }
}

export class SetWaterAmountCall extends ethereum.Call {
  get inputs(): SetWaterAmountCall__Inputs {
    return new SetWaterAmountCall__Inputs(this);
  }

  get outputs(): SetWaterAmountCall__Outputs {
    return new SetWaterAmountCall__Outputs(this);
  }
}

export class SetWaterAmountCall__Inputs {
  _call: SetWaterAmountCall;

  constructor(call: SetWaterAmountCall) {
    this._call = call;
  }

  get _waterAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWaterAmountCall__Outputs {
  _call: SetWaterAmountCall;

  constructor(call: SetWaterAmountCall) {
    this._call = call;
  }
}

export class SetFertAmountCall extends ethereum.Call {
  get inputs(): SetFertAmountCall__Inputs {
    return new SetFertAmountCall__Inputs(this);
  }

  get outputs(): SetFertAmountCall__Outputs {
    return new SetFertAmountCall__Outputs(this);
  }
}

export class SetFertAmountCall__Inputs {
  _call: SetFertAmountCall;

  constructor(call: SetFertAmountCall) {
    this._call = call;
  }

  get _fertAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFertAmountCall__Outputs {
  _call: SetFertAmountCall;

  constructor(call: SetFertAmountCall) {
    this._call = call;
  }
}

export class SetWaterRateCall extends ethereum.Call {
  get inputs(): SetWaterRateCall__Inputs {
    return new SetWaterRateCall__Inputs(this);
  }

  get outputs(): SetWaterRateCall__Outputs {
    return new SetWaterRateCall__Outputs(this);
  }
}

export class SetWaterRateCall__Inputs {
  _call: SetWaterRateCall;

  constructor(call: SetWaterRateCall) {
    this._call = call;
  }

  get _waterRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWaterRateCall__Outputs {
  _call: SetWaterRateCall;

  constructor(call: SetWaterRateCall) {
    this._call = call;
  }
}

export class SetFertRateCall extends ethereum.Call {
  get inputs(): SetFertRateCall__Inputs {
    return new SetFertRateCall__Inputs(this);
  }

  get outputs(): SetFertRateCall__Outputs {
    return new SetFertRateCall__Outputs(this);
  }
}

export class SetFertRateCall__Inputs {
  _call: SetFertRateCall;

  constructor(call: SetFertRateCall) {
    this._call = call;
  }

  get _fertRate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFertRateCall__Outputs {
  _call: SetFertRateCall;

  constructor(call: SetFertRateCall) {
    this._call = call;
  }
}

export class SetWateringsToGrowCall extends ethereum.Call {
  get inputs(): SetWateringsToGrowCall__Inputs {
    return new SetWateringsToGrowCall__Inputs(this);
  }

  get outputs(): SetWateringsToGrowCall__Outputs {
    return new SetWateringsToGrowCall__Outputs(this);
  }
}

export class SetWateringsToGrowCall__Inputs {
  _call: SetWateringsToGrowCall;

  constructor(call: SetWateringsToGrowCall) {
    this._call = call;
  }

  get _wateringsToGrow(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWateringsToGrowCall__Outputs {
  _call: SetWateringsToGrowCall;

  constructor(call: SetWateringsToGrowCall) {
    this._call = call;
  }
}

export class SetLifeStageCall extends ethereum.Call {
  get inputs(): SetLifeStageCall__Inputs {
    return new SetLifeStageCall__Inputs(this);
  }

  get outputs(): SetLifeStageCall__Outputs {
    return new SetLifeStageCall__Outputs(this);
  }
}

export class SetLifeStageCall__Inputs {
  _call: SetLifeStageCall;

  constructor(call: SetLifeStageCall) {
    this._call = call;
  }

  get bonsaiId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _lifeStage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetLifeStageCall__Outputs {
  _call: SetLifeStageCall;

  constructor(call: SetLifeStageCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get caretaker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get bonsaiURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get bonsaiId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class WaterCall extends ethereum.Call {
  get inputs(): WaterCall__Inputs {
    return new WaterCall__Inputs(this);
  }

  get outputs(): WaterCall__Outputs {
    return new WaterCall__Outputs(this);
  }
}

export class WaterCall__Inputs {
  _call: WaterCall;

  constructor(call: WaterCall) {
    this._call = call;
  }

  get _bonsaiId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WaterCall__Outputs {
  _call: WaterCall;

  constructor(call: WaterCall) {
    this._call = call;
  }
}

export class FertilizeCall extends ethereum.Call {
  get inputs(): FertilizeCall__Inputs {
    return new FertilizeCall__Inputs(this);
  }

  get outputs(): FertilizeCall__Outputs {
    return new FertilizeCall__Outputs(this);
  }
}

export class FertilizeCall__Inputs {
  _call: FertilizeCall;

  constructor(call: FertilizeCall) {
    this._call = call;
  }

  get _bonsaiId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class FertilizeCall__Outputs {
  _call: FertilizeCall;

  constructor(call: FertilizeCall) {
    this._call = call;
  }
}

export class GrowCall extends ethereum.Call {
  get inputs(): GrowCall__Inputs {
    return new GrowCall__Inputs(this);
  }

  get outputs(): GrowCall__Outputs {
    return new GrowCall__Outputs(this);
  }
}

export class GrowCall__Inputs {
  _call: GrowCall;

  constructor(call: GrowCall) {
    this._call = call;
  }

  get _bonsaiId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bonsaiURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class GrowCall__Outputs {
  _call: GrowCall;

  constructor(call: GrowCall) {
    this._call = call;
  }
}

export class WiltCall extends ethereum.Call {
  get inputs(): WiltCall__Inputs {
    return new WiltCall__Inputs(this);
  }

  get outputs(): WiltCall__Outputs {
    return new WiltCall__Outputs(this);
  }
}

export class WiltCall__Inputs {
  _call: WiltCall;

  constructor(call: WiltCall) {
    this._call = call;
  }

  get _bonsaiId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bonsaiURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class WiltCall__Outputs {
  _call: WiltCall;

  constructor(call: WiltCall) {
    this._call = call;
  }
}

export class DestroyCall extends ethereum.Call {
  get inputs(): DestroyCall__Inputs {
    return new DestroyCall__Inputs(this);
  }

  get outputs(): DestroyCall__Outputs {
    return new DestroyCall__Outputs(this);
  }
}

export class DestroyCall__Inputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }

  get _bonsaiId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DestroyCall__Outputs {
  _call: DestroyCall;

  constructor(call: DestroyCall) {
    this._call = call;
  }
}
